package codepath.apps.simpletodo;

import java.util.Calendar;
import java.util.Date;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.DatePicker;
import android.widget.DatePicker.OnDateChangedListener;
import android.widget.EditText;

public class EditItemActivity extends ActionBarActivity
{
    int position;
    int daysLeft;
    EditText editText;
    DatePicker datePicker;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.activity_edit_item);
	setupDatePickerListener();
	
	position = getIntent().getIntExtra("position",0);
	editText = (EditText)findViewById(R.id.etItem);
	editText.setText(getIntent().getStringExtra("oldItemText"));
	editText.requestFocus();
    }
    
    public void setupDatePickerListener()
    {
	final Calendar c = Calendar.getInstance();
	int currentYear = c.get(Calendar.YEAR);
	int currentMonth = c.get(Calendar.MONTH);
	int currentDay = c.get(Calendar.DAY_OF_MONTH);

	datePicker = (DatePicker) findViewById(R.id.dpDueDate);
	
	datePicker.init(currentYear, currentMonth, currentDay, new OnDateChangedListener ()
	{
	    @Override
	    public void onDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth)
	    {		
		Calendar dueDate = Calendar.getInstance();
		dueDate.set(Calendar.DAY_OF_MONTH,dayOfMonth);
		dueDate.set(Calendar.MONTH,monthOfYear); 
		dueDate.set(Calendar.YEAR, year);
		  
		daysLeft = daysBetween(new Date(), dueDate.getTime(), false);		
	    }
	    
	});	
    }
    
    public void saveEditedItem(View v)
    {
	  // Prepare data intent 
	  Intent returnResultIntent = new Intent();
	  
	  // Pass relevant data back as a result
	  returnResultIntent.putExtra("newItemText", editText.getText().toString());
	  returnResultIntent.putExtra("position", position);	  
	  returnResultIntent.putExtra("daysLeft", daysLeft);
	  
	  // Activity finished ok, return the data
	  setResult(RESULT_OK, returnResultIntent); // set result code and bundle data for response
	  finish(); // closes the activity, pass data to parent

    }
//
//    @Override
//    public boolean onCreateOptionsMenu(Menu menu)
//    {
//	// Inflate the menu; this adds items to the action bar if it is present.
//	getMenuInflater().inflate(R.menu.edit_item, menu);
//	return true;
//    }
//
//    @Override
//    public boolean onOptionsItemSelected(MenuItem item)
//    {
//	// Handle action bar item clicks here. The action bar will
//	// automatically handle clicks on the Home/Up button, so long
//	// as you specify a parent activity in AndroidManifest.xml.
//	int id = item.getItemId();
//	if (id == R.id.action_settings)
//	{
//	    return true;
//	}
//	return super.onOptionsItemSelected(item);
//    }

    public int daysBetween(Date startDate, Date endDate, boolean countWeekends)
	{
		if (startDate == null || endDate == null)
			throw new IllegalArgumentException("Start Date or End Date can not be null.");

		if (startDate.compareTo(endDate) == 1)
			throw new IllegalArgumentException("Start Date can not be later than End Date.");

		Calendar start = Calendar.getInstance();
		start.setTime(startDate);

		Calendar end = Calendar.getInstance();
		end.setTime(endDate);

		Calendar date = (Calendar) start.clone();
		// assert(start.before(end));
		int days = 0;
		while (date.before(end))
		{
			date.add(Calendar.DAY_OF_MONTH, 1);

			if (countWeekends)
			{
				days++;
			}
			else
			{
				if (date.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY || date.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY)
				{
					// don't count these days
				}
				else
				{
					days++;
				}
			}
		}
		return days;
	}

}
